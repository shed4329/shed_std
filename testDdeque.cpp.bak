#include "Vvector.h"
#include "Eexception.h"

namespace shed_std{
    template <typename T>
    class Ddeque{
        private:
            // 头部插入弹出用，逆序存储
            Vvector<T> _front;
            // 头部有效地址的偏移
            int _front_offset = 0;
            // 尾部插入弹出用
            Vvector<T> _back;
            // 尾部有效地址的偏移
            int _back_offset = 0;
            // 获取_front的有效元素数量
            int _front_size() const{
                return _front.size() - _front_offset;
            }
            // 获取_back的有效元素数量
            int _back_size() const{
                return _back.size() - _back_offset;
            }

            double _trim_ratio = 0.2;
            // 整理front
            void _trim_front(){
                if(_front_offset > _front.size()*0.2){
                    Vvector<T> new_front;
                    for(int i = _front)
                }
            }

            /**
             * 根据Ddeque的逻辑index，返回对应的Vvector的地址
             * @return >=0 为_back
             *         <0 为_front
             *          值的大小代表索引
             */
            int _get_index(int index) const{
                if(index>= _front.size()){
                    return index-_front.size();
                }else{
                    return -(_front.size()-1-index);
                }
            }
        public:
            /**
             * 返回容器大小
             * @return 容器大小
             */
            int size() const{
                return _front.size()+_back.size();
            }

            /**
             * 判断容器是否为空
             * @return true代表空
             */
            bool empty(){
                return _front.empty()&&_back.empty();
            }

            /**
             * 头部插入
             * @param value 值
             */
            void push_front(const T& value){
                int index = _get_index(0);//获取头部位置
                if(index>=0){
                    _back[index] = value;
                }else{
                    _front[-index] = value;
                }
            }

            void pop_front(const T& value){
                if(!_front.empty()){

                }
            }

    };
}